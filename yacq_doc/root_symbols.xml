<?xml version="1.0" encoding="utf-8"?>
<members>
    <member name="Y:(=)">
        <summary>Performs Assign operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1">The second operand values.</param>
        <returns>The result value of Assign operation.</returns>
    </member>
    <member name="Y:(+)">
        <summary>Performs Add, Concatenate (strings) or Unary Plus operation.</summary>
        <param name="0">The first operand value, or just only one operand value.</param>
        <param name="(1..)">The rest operand values.</param>
        <returns>The result value of Add, Concatenate (strings) or Unary Plus operation.</returns>
    </member>
    <member name="Y:(+=)">
        <summary>Performs Add, Concatenate (strings) and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Add, Concatenate and Assign operation.</returns>
    </member>
    <member name="Y:(-)">
        <summary>Performs Subtract or Negate operation.</summary>
        <param name="0">The first operand value, or just only one operand value.</param>
        <param name="(1..)">The rest operand values.</param>
        <returns>The result value of Subtract or Negate operation.</returns>
    </member>
    <member name="Y:(-=)">
        <summary>Performs Subtract and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Subtract and Assign operation.</returns>
    </member>
    <member name="Y:(*)">
        <summary>Performs Multiply operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Multiply operation.</returns>
    </member>
    <member name="Y:(*=)">
        <summary>Performs Multiply and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Multiply and Assign operation.</returns>
    </member>
    <member name="Y:(/)">
        <summary>Performs Divide operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Divide operation.</returns>
    </member>
    <member name="Y:(/=)">
        <summary>Performs Divide and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Divide and Assign operation.</returns>
    </member>
    <member name="Y:(**)">
        <summary>Performs Power operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Power operation.</returns>
    </member>
    <member name="Y:(**=)">
        <summary>Performs Power and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Power and Assign operation.</returns>
    </member>
    <member name="Y:(%)">
        <summary>Performs Modulo operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Modulo operation.</returns>
    </member>
    <member name="Y:(%=)">
        <summary>Performs Modulo and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Modulo and Assign operation.</returns>
    </member>
    <member name="Y:(&lt;&lt;)">
        <summary>Performs Left Shift operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Left Shift operation.</returns>
    </member>
    <member name="Y:(&lt;&lt;=)">
        <summary>Performs Left Shift and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Left Shift and Assign operation.</returns>
    </member>
    <member name="Y:(&gt;&gt;)">
        <summary>Performs Right Shift operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Right Shift operation.</returns>
    </member>
    <member name="Y:(&gt;&gt;=)">
        <summary>Performs Right Shift and Assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Right Shift and Assign operation.</returns>
    </member>
    <member name="Y:(++)">
        <summary>Performs Increment operation.</summary>
        <param name="0">The operand value.</param>
        <returns>The result value of Increment operation.</returns>
    </member>
    <member name="Y:(++=)">
        <summary>Performs (pre-)Increment and Assign operation.</summary>
        <param name="0">The expression as the operand value and to be assigned.</param>
        <returns>The result value of Increment and Assign operation.</returns>
    </member>
    <member name="Y:(=++)">
        <summary>Performs Assign and (post-)Increment operation.</summary>
        <param name="0">The expression as the operand value and to be assigned.</param>
        <returns>The result value of Assign and (post-)Increment operation.</returns>
    </member>
    <member name="Y:(--)">
        <summary>Performs Decrement operation.</summary>
        <param name="0">The operand value.</param>
        <returns>The result value of Decrement operation.</returns>
    </member>
    <member name="Y:(--=)">
        <summary>Performs (pre-)Decrement and Assign operation.</summary>
        <param name="0">The expression as the operand value and to be assigned.</param>
        <returns>The result value of Decrement and Assign operation.</returns>
    </member>
    <member name="Y:(=--)">
        <summary>Performs Assign and (post-)Decrement operation.</summary>
        <param name="0">The expression as the operand value and to be assigned.</param>
        <returns>The result value of Assign and (post-)Decrement operation.</returns>
    </member>
    <member name="Y:(!)">
        <summary>Performs Not operation.</summary>
        <param name="0">The operand value.</param>
        <returns>The result value of Not operation.</returns>
    </member>
    <member name="Y:(~)">
        <summary>Performs One's Complement operation.</summary>
        <param name="0">The operand value.</param>
        <returns>The result value of One's Complement operation.</returns>
    </member>
    <member name="Y:(&lt;)">
        <summary>Performs Less Than operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Less Than operation.</returns>
    </member>
    <member name="Y:(&lt;=)">
        <summary>Performs Less Than Or Equal operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Less Than Or Equal operation.</returns>
    </member>
    <member name="Y:(&gt;)">
        <summary>Performs Greater Than operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Greater Than operation.</returns>
    </member>
    <member name="Y:(&gt;=)">
        <summary>Performs Greater Than Or Equal operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">The rest operand values.</param>
        <returns>The result value of Greater Than Or Equal operation.</returns>
    </member>
    <member name="Y:(&lt;=&gt;)">
        <summary>Performs UFO (Compare) operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1">The second operand values.</param>
        <returns>The result value of UFO (Compare) operation.</returns>
    </member>
    <member name="Y:(==)">
        <summary>Performs Equals operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of Equals operation.</returns>
    </member>
    <member name="Y:(!=)">
        <summary>Performs Not Equals operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of Not Equals operation.</returns>
    </member>
    <member name="Y:(===)">
        <summary>Performs Reference Equals operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of Reference Equals operation.</returns>
    </member>
    <member name="Y:(!==)">
        <summary>Performs Reference Not Equals operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of Reference Not Equals operation.</returns>
    </member>
    <member name="Y:(&amp;)">
        <summary>Performs bitwise And operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of bitwise And operation.</returns>
    </member>
    <member name="Y:(&amp;=)">
        <summary>Performs bitwise And and assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of bitwise And operation.</returns>
    </member>
    <member name="Y:(|)">
        <summary>Performs bitwise Or operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of bitwise Or operation.</returns>
    </member>
    <member name="Y:(|=)">
        <summary>Performs bitwise Or and assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of bitwise Or operation.</returns>
    </member>
    <member name="Y:(^)">
        <summary>Performs bitwise Xor operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of bitwise Xor operation.</returns>
    </member>
    <member name="Y:(^=)">
        <summary>Performs bitwise Xor and assign operation.</summary>
        <param name="0">The expression as the first operand value and to be assigned.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of bitwise Xor operation.</returns>
    </member>
    <member name="Y:(&amp;&amp;)">
        <summary>Performs short-circuit And operation</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of short-circuit And operation.</returns>
    </member>
    <member name="Y:(||)">
        <summary>Performs short-circuit Or operation</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of short-circuit Or operation.</returns>
    </member>
    <member name="Y:(??)">
        <summary>Performs Null Coalesce operation.</summary>
        <param name="0">The first operand value.</param>
        <param name="1..">Rest operand values.</param>
        <returns>The result value of Null Coalesce operation.</returns>
    </member>
    <member name="Y:(?)">
        <summary>Performs Not Equals Null operation.</summary>
        <param name="0">The value to test.</param>
        <returns>The result value of Not Equals Null operation.</returns>
    </member>
    <member name="Y:(!?)">
        <summary>Performs Equals Null operation.</summary>
        <param name="0">The value to test.</param>
        <returns>The result value of Equals Null operation.</returns>
    </member>
    <member name="Y:(.)">
        <summary>Dispatch members and methods, or apply type arguments.</summary>
        <param name="0">The left value.</param>
        <param name="1..">Identifier: the name of member, or List: the name of method and arguments, or Vector: the arguments of indexer or type arguments.</param>
        <returns>The result value of dispatching or applying type arguments.</returns>
    </member>
    <member name="Y:(let)">
        <summary>Creates a code block, optionally with variables.</summary>
        <param name="(0)">Vector. The sequence which contains pairs of:<list type="bullet">
            <description>Identifier: The identifier of the variable of the code block.</description>
            <description>Optional. <c>:</c> character and the type of the variable, or, initial value of the variable (type is inferred).</description>
            <description>(They are formed like <c>[x 123 y:Object z "abc"]</c>)</description>
        </list></param>
        <param name="(1..)">The code (block) as the body of the function, or empty code block if omitted.</param>
        <returns>The function which has specified parameters and </returns>
    </member>
    <member name="Y:($)">
        <summary>Alias symbol of <see cref="Y:(let)"/>.</summary>
    </member>
    <member name="Y:(fun)">
        <summary>Creates a function.</summary>
        <param name="(0)">Vector. The sequence which contains pairs of:<list type="bullet">
            <description>Identifier: The identifier of the parameter of the function.</description>
            <description>Optional. <c>:</c> character and the type of the parameter, or inferred if omitted.</description>
            <description>(They are formed like <c>[x:Int32 y z:Int32]</c>)</description>
        </list></param>
        <param name="(1..)">The code (block) as the body of the function, or empty code block if omitted.</param>
        <returns>The function which has specified parameters and </returns>
    </member>
    <member name="Y:(\)">
        <summary>Alias symbol of <see cref="Y:(fun)"/>.</summary>
    </member>
    <member name="Y:(alias)">
        <summary>Aliases expressions to identifiers and apply codes with alias identifiers.</summary>
        <param name="0">Vector. The sequence which contains pairs of:<list type="bullet">
            <description>Identifier: The identifier of the name to alias expression.</description>
            <description>The expression to be aliased by the identifier.</description>
        </list></param>
        <param name="(1..)">The code (block) to apply with alias identifiers, or empty code block if omitted.</param>
        <returns>The result value of <paramref name="(1..)"/> code (block).</returns>
    </member>
    <member name="Y:(...)">
        <summary>Throws <see cref="T:System.Exception"/> immediately from the evaluator.</summary>
    </member>
    <member name="Y:(&gt;_&lt;)">
        <summary>Signals a breakpoint to an attached debugger immediately from the evaluator.</summary>
    </member>
    <member name="Y:(tuple)">
        <summary>Creates the tuple with specified elements.</summary>
        <param name="0..">The elements of new tuple.</param>
        <returns>The tuple which contains specified elements.</returns>
    </member>
    <member name="Y:(input)">
        <summary>Inputs from the standard input.</summary>
        <returns>The string from the standard input.</returns>
    </member>
    <member name="Y:System.Object.(print)">
        <summary>Outputs the value and newline characters to the standard output.</summary>
    </member>
    <member name="Y:System.Object.(printn)">
        <summary>Outputs the value to the standard output.</summary>
    </member>
    <member name="Y:(typeof)">
        <summary>Gets the <see cref="T:System.Type"/> object which has specified type name.</summary>
        <param name="0">The string of full type name.</param>
        <returns>The <see cref="T:System.Type"/> object which has specified type name.</returns>
    </member>
    <member name="Y:(type)">
        <summary>Gets the type which has specified type name.</summary>
        <param name="0">The string of full type name.</param>
        <returns>The type which has specified type name.</returns>
    </member>
    <member name="Y:(def)">
        <summary>Define a symbol in the global symbol table.</summary>
        <param name="0">Identifier: The symbol name to define.</param>
        <param name="1">The value of new symbol.</param>
    </member>
    <member name="Y:(def!)">
        <summary>Define or redefine (overwrite) a symbol in the global symbol table.</summary>
        <param name="0">Identifier: The symbol name to define or redefine (overwrite).</param>
        <param name="1">The value of new symbol.</param>
    </member>
    <member name="Y:(undef)">
        <summary>Undefine a symbol in the global symbol table.</summary>
        <param name="0">Identifier: The symbol name to undefine.</param>
    </member>
    <member name="Y:(load)">
        <summary>Loads an external script and apply to the global symbol table.</summary>
        <param name="0">The string of loading script name.</param>
    </member>
    <member name="Y:System.Object.(let)">
        <summary>Name this value as specified identifier and apply codes with its identifier.</summary>
        <param name="0">Identifier: The identifier to name this value.</param>
        <param name="1..">The code (block) to apply with specified identifier.</param>
        <returns>The result value of <paramref name="1.."/> code (block).</returns>
    </member>
    <member name="Y:System.Object.(alias)">
        <summary>Aliases this expression to specified identifier and apply codes with alias identifier.</summary>
        <param name="0">Identifier: The identifier of the name to alias this expression.</param>
        <param name="1..">The code (block) to apply with specified alias identifier.</param>
        <returns>The result value of <paramref name="1.."/> code (block).</returns>
        <remarks>"this expression" means the receiver is not evaluated and the alias identifier is for the non-evaluated expression.</remarks>
    </member>
    <member name="Y:System.Boolean.(cond)">
        <summary>Gets the value from the specified two values by this boolean value.</summary>
        <param name="0">The value whether this boolean value is <see cref="Y:true"/>.</param>
        <param name="1">The value whether this boolean value is <see cref="Y:false"/>.</param>
        <returns>The <paramref name="1"/> value if this boolean value returns <see cref="Y:true"/>; otherwise, the <paramref name="1"/> value.</returns>
    </member>
    <member name="Y:[System.Object].(new)">
        <summary>Calls the constructor of this type with specified arguments.</summary>
        <param name="(0..)">Arguments of the constructor call.</param>
        <returns>The object initialized by the constructor.</returns>
    </member>
    <member name="Y:System.Object.(with)">
        <summary>Initializes members of this new object, it represents as a constructor call.</summary>
        <param name="0">Identifier: The member name to initialize.</param>
        <param name="1">The value of initializing member.</param>
        <param name="(2..)">Optional pairs of initializing member names and values like <paramref name="0"/> and <paramref name="1"/>.</param>
        <returns>The object which is initialized with specified name-and-value pairs.</returns>
    </member>
    <member name="Y:System.Object.(to)">
        <summary>Convert this object to specified type.</summary>
        <returns>The object which is converted to specified type, or <see cref="Y:nil"/> if the conversion was failed.</returns>
    </member>
    <member name="Y:System.Object.(as)">
        <summary>Convert this object as an explicit reference or boxing conversion to specified reference type, in which <see cref="Y:nil"/> is supplied if the conversion fails.</summary>
        <returns>The object which is converted to specified reference type, or <see cref="Y:nil"/> if the conversion was failed.</returns>
    </member>
    <member name="Y:System.Object.(is)">
        <summary>Tests this object is specified type.</summary>
        <param name="0">The type to test.</param>
        <returns><see cref="Y:true"/> if this object is specified type; otherwise <see cref="Y:false"/>.</returns>
    </member>
    <member name="Y:XSpect.Yacq.SymbolTable.(def)">
        <summary>Define a symbol in this symbol table.</summary>
        <param name="0">Identifier: The symbol name to define.</param>
        <param name="1">The value of new symbol.</param>
    </member>
    <member name="Y:XSpect.Yacq.SymbolTable.(def!)">
        <summary>Define or redefine (overwrite) a symbol in this symbol table.</summary>
        <param name="0">Identifier: The symbol name to define or redefine (overwrite).</param>
        <param name="1">The value of new symbol.</param>
    </member>
    <member name="Y:XSpect.Yacq.SymbolTable.(undef)">
        <summary>Undefine a symbol in this symbol table.</summary>
        <param name="0">Identifier: The symbol name to undefine.</param>
    </member>
    <member name="Y:XSpect.Yacq.SymbolTable.(load)">
        <summary>Loads an external script and apply to this symbol table.</summary>
        <param name="0">The string which is loading script name.</param>
    </member>
    <member name="Y:...">
        <summary>Throws <see cref="T:System.NotImplementedException"/>.</summary>
    </member>
    <member name="Y:true">
        <summary>Gets the <c>true</c> value.</summary>
        <value>The the <c>true</c> value.</value>
    </member>
    <member name="Y:false">
        <summary>Gets the <c>false</c> value.</summary>
        <value>The the <c>false</c> value.</value>
    </member>
    <member name="Y:nil">
        <summary>Gets the <c>null</c> value.</summary>
        <value>The the <c>null</c> value.</value>
    </member>
    <member name="Y:&gt;_&lt;">
        <summary>Signals a breakpoint to an attached debugger.</summary>
    </member>
    <member name="Y:?">
        <summary>Gets the list which contains global symbols.</summary>
        <value>The list which contains global symbols.</value>
    </member>
    <member name="Y:*libs*">
        <summary>Gets the library loader system object.</summary>
        <value>The library loader system object.</value>
    </member>
    <member name="Y:*docs*">
        <summary>Gets the document repository system object.</summary>
        <value>The document repository system object.</value>
    </member>
    <member name="Y:*typegen*">
        <summary>Gets the type generator system object.</summary>
        <value>The type generator system object.</value>
    </member>
    <member name="Y:System.Object.?">
        <summary>Gets the list which contains instance members, extension members, and macro symbols for this expression.</summary>
        <value>The list which contains instance members, extension members, and macro symbols for this expression.</value>
    </member>
    <member name="Y:[System.Object].?">
        <summary>Gets the list which contains static members, and macro symbols for this type.</summary>
        <value>The list which contains static members, extension members, and macro symbols for this type.</value>
    </member>
    <member name="Y:[System.Object].array">
        <summary>Gets the 1-dimension array type of this type.</summary>
        <value>The 1-dimension array type of this type.</value>
    </member>
    <member name="Y:[System.Object].type">
        <summary>Gets the <see cref="T:System.Type"/> object which represents this type.</summary>
        <value>The <see cref="T:System.Type"/> object which represents this type.</value>
    </member>
</members>